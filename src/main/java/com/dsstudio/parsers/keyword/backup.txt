// Keyword Validation, TypeCheck
			// If keyword is related to Stock.
//			boolean stockKeywordCheck = document.toString()
//					.contains(DataCommon.getValueBy("StockKeywordCheck", parsers));
//			boolean stockKeywordTypeCheck = DataCommon
//					.containValue(DataCommon.getValueBy("StockKeywordTypeCheck", parsers), keywordName);
//
//			if (stockKeywordCheck || stockKeywordTypeCheck) {
//				if (stockKeywordCheck) {
//					// keywordId = generateStockKeyword
//					stockKeywordId = generateStockKeyword(keywordName, keywordLinkQueue.getLink(), agent.getId(), 1);
//					if (stockKeywordId != 0)
//						new StockParser(document, agent).parseStock(stockKeywordId);
//					relatedKeywordLinkDao.upsertRelatedKeywordLink(keywordLinkQueue.getParentId(), stockKeywordId, 0);
//
//				} else if (stockKeywordTypeCheck) {
//					stockKeywordId = generateStockKeyword(keywordName, keywordLinkQueue.getLink(), agent.getId(), 2);
//					relatedKeywordLinkDao.upsertRelatedKeywordLink(keywordLinkQueue.getParentId(), stockKeywordId, 0);
//				}
//				System.out.println("testing = " + keywordName);
//				Elements elements = document.select(DataCommon.getValueBy("RKeywordList", parsers))
//						.select(DataCommon.getValueBy("RKeywordListElem", parsers));
//
//				int correl = 1;
//				for (Element elem : elements) {
//					String title = elem.text().trim().replaceAll("주식", "").replaceAll("주가", "");
//					String link = agentConfig.getSearchQuery() + elem.attr("href");
//					saveKeywordLinkQueue(link, agent.getId(), stockKeywordId);
//				}
//			}